//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraLowerLookLimit;

    public static Entitas.IMatcher<GameEntity> CameraLowerLookLimit {
        get {
            if (_matcherCameraLowerLookLimit == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraLowerLookLimit);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraLowerLookLimit = matcher;
            }

            return _matcherCameraLowerLookLimit;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.CameraLowerLookLimit cameraLowerLookLimit { get { return (Code.Gameplay.Features.CameraLowerLookLimit)GetComponent(GameComponentsLookup.CameraLowerLookLimit); } }
    public float CameraLowerLookLimit { get { return cameraLowerLookLimit.Value; } }
    public bool hasCameraLowerLookLimit { get { return HasComponent(GameComponentsLookup.CameraLowerLookLimit); } }

    public GameEntity AddCameraLowerLookLimit(float newValue) {
        var index = GameComponentsLookup.CameraLowerLookLimit;
        var component = (Code.Gameplay.Features.CameraLowerLookLimit)CreateComponent(index, typeof(Code.Gameplay.Features.CameraLowerLookLimit));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCameraLowerLookLimit(float newValue) {
        var index = GameComponentsLookup.CameraLowerLookLimit;
        var component = (Code.Gameplay.Features.CameraLowerLookLimit)CreateComponent(index, typeof(Code.Gameplay.Features.CameraLowerLookLimit));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCameraLowerLookLimit() {
        RemoveComponent(GameComponentsLookup.CameraLowerLookLimit);
        return this;
    }
}
