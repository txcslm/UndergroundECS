//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraUpperLookLimit;

    public static Entitas.IMatcher<GameEntity> CameraUpperLookLimit {
        get {
            if (_matcherCameraUpperLookLimit == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraUpperLookLimit);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraUpperLookLimit = matcher;
            }

            return _matcherCameraUpperLookLimit;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.CameraUpperLookLimit cameraUpperLookLimit { get { return (Code.Gameplay.Features.CameraUpperLookLimit)GetComponent(GameComponentsLookup.CameraUpperLookLimit); } }
    public float CameraUpperLookLimit { get { return cameraUpperLookLimit.Value; } }
    public bool hasCameraUpperLookLimit { get { return HasComponent(GameComponentsLookup.CameraUpperLookLimit); } }

    public GameEntity AddCameraUpperLookLimit(float newValue) {
        var index = GameComponentsLookup.CameraUpperLookLimit;
        var component = (Code.Gameplay.Features.CameraUpperLookLimit)CreateComponent(index, typeof(Code.Gameplay.Features.CameraUpperLookLimit));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCameraUpperLookLimit(float newValue) {
        var index = GameComponentsLookup.CameraUpperLookLimit;
        var component = (Code.Gameplay.Features.CameraUpperLookLimit)CreateComponent(index, typeof(Code.Gameplay.Features.CameraUpperLookLimit));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCameraUpperLookLimit() {
        RemoveComponent(GameComponentsLookup.CameraUpperLookLimit);
        return this;
    }
}
